package org.redlamp.util;

import org.redlamp.logger.ApiLogger;

import java.awt.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 * @author NJINU
 */
public class BSPanel extends javax.swing.JPanel
{
    public final String MODULE;
    BRSetting bRSetting = new BRSetting();
    private HashMap<String, BRSetting> settings = new HashMap<>();
    private Connection conn;
    //  private TDClient tDClient = new TDClient(BRMain.brxLogger);

    /**
     * Creates new form MXPanel
     *
     * @param module
     */
    public BSPanel(String module)
    {
        this.MODULE = module;
        initComponents();

        setSettingTree();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents()
    {

        settingsDialog = new javax.swing.JDialog();
        settingTreeScroller = new javax.swing.JScrollPane();
        settingTree = new javax.swing.JTree();
        jSeparator1 = new javax.swing.JSeparator();
        saveSettingButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        closeDialogButton = new javax.swing.JButton();
        detailsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        codeField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        modifiedByField = new javax.swing.JTextField();
        modifiedDateField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        valueArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        descriptionArea = new javax.swing.JTextArea();

        settingsDialog.setTitle("Ruby Settings");
        settingsDialog.setModal(true);
        settingsDialog.setName("settingsDialog"); // NOI18N

        javax.swing.GroupLayout settingsDialogLayout = new javax.swing.GroupLayout(settingsDialog.getContentPane());
        settingsDialog.getContentPane().setLayout(settingsDialogLayout);
        settingsDialogLayout.setHorizontalGroup(
                settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        settingsDialogLayout.setVerticalGroup(
                settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );

        settingsDialog.setContentPane(this);
        settingsDialog.pack();
        settingsDialog.setResizable(false);
        settingsDialog.setLocationRelativeTo(null);

        settingTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 5, 2, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Settings");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Add Setting");
        treeNode1.add(treeNode2);
        settingTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        settingTree.setAutoscrolls(true);
        settingTree.setCellRenderer(new TRenderer());
        settingTree.setRootVisible(false);
        settingTree.setShowsRootHandles(true);
        settingTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                settingTreeValueChanged(evt);
            }
        });
        settingTreeScroller.setViewportView(settingTree);

        saveSettingButton.setText("Save");
        saveSettingButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveSettingButtonActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        closeDialogButton.setText("Close");
        closeDialogButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeDialogButtonActionPerformed(evt);
            }
        });

        detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.darkGray), "Setting", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel1.setText("Setting Code");

        codeField.setBackground(new java.awt.Color(153, 204, 255));
        codeField.setForeground(new java.awt.Color(51, 102, 255));

        jLabel2.setText("Setting Value");

        jLabel3.setText("Description");

        modifiedByField.setEditable(false);
        modifiedByField.setForeground(new java.awt.Color(51, 102, 255));

        modifiedDateField.setEditable(false);
        modifiedDateField.setForeground(new java.awt.Color(51, 102, 255));

        jLabel8.setText("Date Modified");

        jLabel10.setText("Modified By");

        valueArea.setBackground(new java.awt.Color(153, 204, 255));
        valueArea.setColumns(20);
        valueArea.setLineWrap(true);
        valueArea.setRows(5);
        jScrollPane2.setViewportView(valueArea);

        descriptionArea.setBackground(new java.awt.Color(153, 204, 255));
        descriptionArea.setColumns(20);
        descriptionArea.setLineWrap(true);
        descriptionArea.setRows(5);
        jScrollPane3.setViewportView(descriptionArea);

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
                detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(detailsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(codeField, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane2)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(detailsPanelLayout.createSequentialGroup()
                                                .addComponent(modifiedDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(modifiedByField, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        detailsPanelLayout.setVerticalGroup(
                detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(detailsPanelLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(codeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8)
                                        .addComponent(modifiedDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10)
                                        .addComponent(modifiedByField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(settingTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(detailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(saveSettingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(closeDialogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jSeparator1))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(settingTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(closeDialogButton, javax.swing.GroupLayout.Alignment.LEADING))
                                                                .addContainerGap())
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(saveSettingButton)
                                                                .addContainerGap())))))
        );
    }// </editor-fold>

    private void settingTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)
    {
        // TODO add your handling code here:
        updateDisplay();
    }

    private void saveSettingButtonActionPerformed(java.awt.event.ActionEvent evt)
    {
        // TODO add your handling code here:
        if (isSettingComplete()) {
            boolean proceed = getSettings().containsKey(bRSetting.getCode())
                    ? (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(settingsDialog, "Are you sure you want to save changes to this setting?", "Confirm Update", JOptionPane.YES_NO_OPTION))
                    : (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(settingsDialog, "Are you sure you want to save this new setting?", "Confirm Save", JOptionPane.YES_NO_OPTION));
            if (proceed) {
                bRSetting.setModule(MODULE);
                bRSetting.setCode(codeField.getText());
                bRSetting.setValue(valueArea.getText().equals(protect(bRSetting.getValue())) ? bRSetting.getValue() : valueArea.getText());
                bRSetting.setDescription(descriptionArea.getText());
                bRSetting.setDateModified(new Date());
                bRSetting.setLastModifiedBy("system");
                if (upsertSetting(bRSetting)) {
                    setSettingTree();
                    querySettings();
//                    switch (MODULE) {
//                        case MXController.Module:
//                            conn.querySettings();
//                            break;
//                        default:
//                            TXController.querySettings();
//                    }
                    JOptionPane.showMessageDialog(settingsDialog, "Setting saved successfully.");
                }
                else {
                    JOptionPane.showMessageDialog(settingsDialog, "Unable to save setting!", "Saving Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    public void showSettingsDialog()
    {
        // TODO add your handling code here:
        settingsDialog.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/logo.png")));
        settingsDialog.setTitle(MODULE + " Settings");
        SwingUtilities.invokeLater(()
                ->
        {
            setSettings(querySettings());
            settingsDialog.setContentPane(this);
            settingsDialog.pack();
            settingsDialog.setLocationRelativeTo(null);
            settingsDialog.setVisible(true);
        });
    }

    private void closeDialogButtonActionPerformed(java.awt.event.ActionEvent evt)
    {
        // TODO add your handling code here:
        settingsDialog.setVisible(false);
    }

    public void setSettingTree()
    {
        setSettings(querySettings());
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) settingTree.getModel().getRoot();

        rootNode.removeAllChildren();
        rootNode.add(new DefaultMutableTreeNode("Add Setting"));

        Object[] codes = getSettings().keySet().toArray();
        Arrays.sort(codes);

        for (Object code : codes) {
            rootNode.add(new DefaultMutableTreeNode(getSettings().get(code)));
        }

        settingTree.scrollPathToVisible(new TreePath(rootNode));
        settingTree.setSelectionPath(rootNode.getChildCount() > 1 ? new TreePath(rootNode.getChildAt(1)) : new TreePath((DefaultMutableTreeNode) rootNode.getFirstChild()));
        updateTreeUI();
    }

    private void updateTreeUI()
    {
        SwingUtilities.invokeLater(()
                ->
        {
            settingTreeScroller.getHorizontalScrollBar().setValue(0);
            settingTreeScroller.getVerticalScrollBar().setValue(0);
            settingTreeScroller.setBorder(null);
            settingTree.updateUI();
        });
    }

    public void updateDisplay()
    {
        DefaultMutableTreeNode settingNode = (DefaultMutableTreeNode) settingTree.getLastSelectedPathComponent();
        if (settingNode != null) {
            if (settingNode.getUserObject() instanceof BRSetting) {
                displaySetting((BRSetting) settingNode.getUserObject());
            }
            else {
                getNewSetting();
            }
        }
    }

    private void displaySetting(BRSetting setting)
    {
        bRSetting = setting;
        codeField.setEditable(false);
        codeField.setText(bRSetting.getCode());
        descriptionArea.setText(bRSetting.getDescription());
        modifiedByField.setText(bRSetting.getLastModifiedBy());
        valueArea.setText(bRSetting.isEncrypted() ? protect(bRSetting.getValue()) : bRSetting.getValue());
        modifiedDateField.setText(new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss a").format(bRSetting.getDateModified()));
    }

    private String protect(String value)
    {

        return protectField(value, 2, 2);
    }

    public String protectField(String fieldValue, int preSkip, int postSkip)
    {
        try {
            for (int i = preSkip; i < fieldValue.length() - postSkip; i++) {
                fieldValue = fieldValue.substring(0, i) + "X" + fieldValue.substring(i + 1);
            }
        }
        catch (Exception ex) {
            ex = null;
        }
        return fieldValue;
    }

    private boolean isSettingComplete()
    {
        if ("".equals(codeField.getText().trim())) {
            JOptionPane.showMessageDialog(settingsDialog, "Please set setting code!", "Missing Field", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if ("".equals(valueArea.getText().trim())) {
            JOptionPane.showMessageDialog(settingsDialog, "Please set setting value!", "Missing Field", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if ("".equals(descriptionArea.getText().trim())) {
            JOptionPane.showMessageDialog(settingsDialog, "Please set setting description!", "Missing Field", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void getNewSetting()
    {
        resetAllFields();
    }

    public void resetAllFields()
    {
        bRSetting = new BRSetting();
        codeField.setText("");
        valueArea.setText("");
        descriptionArea.setText("");
        modifiedByField.setText("");
        codeField.setEditable(true);
        modifiedDateField.setText(String.valueOf(new Date()));
    }

    public HashMap<String, BRSetting> querySettings()
    {
        if(conn==null){
            try {
                conn = XapiPool.getConnection();
            }
            catch (SQLException ex) {
                ApiLogger.getLogger().error(ex);
            }
        }
        HashMap<String, BRSetting> bRSettings = new HashMap<>();
        try (Statement statement = conn.createStatement();
             ResultSet rs = statement.executeQuery("SELECT CODE, VALUE, MODULE, DESCRIPTION, MODIFIED_BY, DATE_MODIFIED FROM xapi..EI_SETTING  ORDER BY CODE ASC")) {
            while (rs.next()) {
                BRSetting bRSetting = new BRSetting();
                bRSetting.setCode(rs.getString("CODE"));
                bRSetting.setEncrypted(false);
                bRSetting.setValue(rs.getString("VALUE"));
                bRSetting.setModule(rs.getString("MODULE"));
                bRSetting.setDescription(rs.getString("DESCRIPTION"));
                bRSetting.setLastModifiedBy(rs.getString("MODIFIED_BY"));
                bRSetting.setDateModified(rs.getDate("DATE_MODIFIED"));
                bRSettings.put(bRSetting.getCode(), bRSetting);
            }
        }
        catch (Exception ex) {
            ApiLogger.getLogger().error(ex);
        }
        return bRSettings;
    }

    public boolean upsertSetting(BRSetting bRSetting)
    {
        return recordExists("SELECT CODE FROM xapi..EI_SETTING WHERE CODE='" + bRSetting.getCode() + "' AND MODULE='" + bRSetting.getModule() + "'")
                ? updateSetting(bRSetting)
                : saveSetting(bRSetting);
    }

    private boolean saveSetting(BRSetting bRSetting)
    {
        return executeUpdate("INSERT INTO xapi..EI_SETTING(CODE, VALUE, MODULE, DESCRIPTION, MODIFIED_BY, DATE_MODIFIED) VALUES('" + bRSetting.getCode() + "', '" + bRSetting.getValue() + "', '" + bRSetting.getModule() + "', '" + bRSetting.getDescription() + "', '" + bRSetting.getLastModifiedBy() + "', getdate())", true);
    }

    public boolean updateSetting(BRSetting bRSetting)
    {
        return executeUpdate("UPDATE xapi..EI_SETTING SET VALUE='" + bRSetting.getValue() + "', DESCRIPTION='" + bRSetting.getDescription() + "', MODIFIED_BY='" + bRSetting.getLastModifiedBy() + "', DATE_MODIFIED=SYSDATE WHERE CODE='" + bRSetting.getCode() + "' AND MODULE='" + bRSetting.getModule() + "'", true);
    }

    public boolean executeUpdate(String update, boolean retry)
    {
        if(conn==null){
            try {
                conn = XapiPool.getConnection();
            }
            catch (SQLException ex) {
                ApiLogger.getLogger().error(ex);
            }
        }
        try {

            update = update.replaceAll("'null'", "NULL").replaceAll("'NULL'", "NULL");
            try (Statement statement = conn.createStatement()) {
                statement.executeUpdate(update);
            }
            return true;
        }
        catch (Exception ex) {
            if (String.valueOf(ex.getMessage()).contains("ORA-01000")) {
                dispose();
                if (retry) {
                    return executeUpdate(update, false);
                }
            }
            else {
                ApiLogger.getLogger().info(update);
                ApiLogger.getLogger().error(ex);
                ;
            }
        }
        return false;
    }

    public void dispose()
    {
        try {
            if (conn != null) {
                conn.close();
            }
        }
        catch (Exception ex) {
            ex = null;
        }
    }

    public boolean recordExists(String query)
    {
        if(conn==null){
            try {
                conn = XapiPool.getConnection();
            }
            catch (SQLException ex) {
                ApiLogger.getLogger().error(ex);
            }
        }
        boolean exists = false;
        try (Statement statement = conn.createStatement();
             ResultSet rs = statement.executeQuery(query)) {
            exists = rs.next();
        }
        catch (Exception ex) {
            ApiLogger.getLogger().error(ex);
        }
        return exists;
    }

    // Variables declaration - do not modify
    private javax.swing.JButton closeDialogButton;
    private javax.swing.JTextField codeField;
    private javax.swing.JTextArea descriptionArea;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField modifiedByField;
    private javax.swing.JTextField modifiedDateField;
    private javax.swing.JButton saveSettingButton;
    private javax.swing.JTree settingTree;
    private javax.swing.JScrollPane settingTreeScroller;
    public javax.swing.JDialog settingsDialog;
    private javax.swing.JTextArea valueArea;
    // End of variables declaration

    /**
     * @return the settings
     */
    public HashMap<String, BRSetting> getSettings()
    {
        return settings;
    }

    /**
     * @param settings the settings to set
     */
    public void setSettings(HashMap<String, BRSetting> settings)
    {
        this.settings = settings;
    }
}
