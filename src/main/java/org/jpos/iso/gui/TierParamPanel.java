/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jpos.iso.gui;

import org.redlamp.core.MainClass;
import org.redlamp.extras.CRCaller;
import org.redlamp.logger.ApiLogger;
import org.redlamp.model.LoanParameterTier;
import org.redlamp.util.BSPanel;
import org.redlamp.util.XapiCodes;
import org.redlamp.util.XapiPool;

import java.awt.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 * @author alexn
 */
public class TierParamPanel extends JPanel
{

    private HashMap<BigDecimal, AXTier> tiers = new HashMap<>();
    JDialog tierDialog = null;
    private Connection conn;


    /**
     * Creates new form TierParamPanel
     */
    public TierParamPanel()
    {

        initComponents();
        try
        {
            conn = XapiPool.getConnection();
        } catch (SQLException ex)
        {
            ApiLogger.getLogger().error(ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new JPanel();
        tierDisplayPanel = new JPanel();
        jLabel11 = new JLabel();
        tierMinField = new JTextField();
        jLabel12 = new JLabel();
        tierMaxField = new JTextField();
        jLabel13 = new JLabel();
        tierValueField = new JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        tierButton = new javax.swing.JButton();
        tierCodeBox = new JComboBox<>();
        tierTreeScroller = new JScrollPane();
        tierTree = new JTree();
        closeTier = new javax.swing.JButton();

        tierDisplayPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        jLabel11.setText("Tier Limits");

        tierMinField.setForeground(new java.awt.Color(51, 102, 255));
        tierMinField.setHorizontalAlignment(JTextField.TRAILING);
        tierMinField.setToolTipText("Tier Floor");

        jLabel12.setText("-");

        tierMaxField.setHorizontalAlignment(JTextField.TRAILING);
        tierMaxField.setToolTipText("Tier Ceiling");
        tierMaxField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                tierMaxFieldFocusLost(evt);
            }
        });

        jLabel13.setText("Value");

        tierValueField.setHorizontalAlignment(JTextField.TRAILING);
        tierValueField.setToolTipText("Tier Charge");
        tierValueField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                tierValueFieldFocusLost(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        tierButton.setText("Save Tier");
        tierButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tierButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tierDisplayPanelLayout = new javax.swing.GroupLayout(tierDisplayPanel);
        tierDisplayPanel.setLayout(tierDisplayPanelLayout);
        tierDisplayPanelLayout.setHorizontalGroup(
                tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tierDisplayPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tierMinField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tierMaxField, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tierValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tierButton)
                                .addContainerGap())
        );
        tierDisplayPanelLayout.setVerticalGroup(
                tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tierDisplayPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jSeparator3)
                                        .addGroup(tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel11)
                                                .addComponent(tierMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel12)
                                                .addComponent(tierMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel13)
                                                .addComponent(tierValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(tierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addContainerGap(20, Short.MAX_VALUE))
        );

        tierCodeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"-- Select --", "CY01 ~ Cycle Tier", "DL01 ~ Loan Duration Tier", "DI01 ~ Defaulted Instalement Tier", "DS01 ~ Definition Evaluation Tier", "WS01 ~ Weighted Score Tier"}));
        tierCodeBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tierCodeBoxActionPerformed(evt);
            }
        });
        tierCodeBox.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                tierCodeBoxPropertyChange(evt);
            }
        });
        tierCodeBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                tierCodeBoxItemStateChanged(evt);
            }
        });

        tierTreeScroller.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        tierTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        DefaultMutableTreeNode treeNode1 = new DefaultMutableTreeNode("Tiers");
        DefaultMutableTreeNode treeNode2 = new DefaultMutableTreeNode("Add Tier");
        treeNode1.add(treeNode2);
        tierTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tierTree.setCellRenderer(new TRenderer());
        tierTree.setRootVisible(false);
        tierTree.setShowsRootHandles(true);
        tierTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                tierTreeValueChanged(evt);
            }
        });
        tierTreeScroller.setViewportView(tierTree);

        closeTier.setText("Close");
        closeTier.setMaximumSize(new java.awt.Dimension(77, 23));
        closeTier.setMinimumSize(new java.awt.Dimension(77, 23));
        closeTier.setPreferredSize(new java.awt.Dimension(77, 23));
        closeTier.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeTierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(tierTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tierDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(tierCodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(closeTier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tierTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(tierCodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tierDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(closeTier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tierMaxFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_tierMaxFieldFocusLost
    {//GEN-HEADEREND:event_tierMaxFieldFocusLost
        // TODO add your handling code here:

        String maxAmt = tierMaxField.getText().trim();
        if (!isBlank(maxAmt))
        {
            BigDecimal ceiling;
            if ((ceiling = convertToType(maxAmt, BigDecimal.class)) != null)
            {
                formatDecimalValue(tierMaxField);
                //  tierMinField.setText(getTierFloor(ceiling).toPlainString());
                if (getTiers().containsKey(tierMaxField.getText()))
                {
                    selectTreeNode(tierTree, getTiers().get(tierMaxField.getText()));
                }
            }
            else
            {
                tierMaxField.requestFocus();
                tierMaxField.selectAll();
            }
        }
    }//GEN-LAST:event_tierMaxFieldFocusLost

    private void tierValueFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_tierValueFieldFocusLost
    {//GEN-HEADEREND:event_tierValueFieldFocusLost
        // TODO add your handling code here:
        if (!isBlank(tierValueField.getText()))
        {
            if (isPositiveNumber(tierValueField.getText().trim()))
            {
                formatDecimalValue(tierValueField);
            }
            else
            {
                tierValueField.requestFocus();
                tierValueField.selectAll();
            }
        }
    }//GEN-LAST:event_tierValueFieldFocusLost

    private void tierButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tierButtonActionPerformed
    {//GEN-HEADEREND:event_tierButtonActionPerformed
        // TODO add your handling code here:
        boolean save = tierButton.getText().equals("Save Tier");
        if (save)
        {
            AXTier tXTier = new AXTier();
            tXTier.setTierCode(tierCodeBox.getSelectedItem().toString().split("~")[0].trim());
            tXTier.setTierMax(formatDecimal(new BigDecimal(tierMaxField.getText().trim())));
            //            tXTier.setValue(formatDecimal(new BigDecimal(tierValueField.getText().trim())));
            //            tXTier.setTierMin(formatDecimal(new BigDecimal(tierMinField.getText().trim())));
            tXTier.setValue(formatDecimal(new BigDecimal(tierValueField.getText().trim())));
            tXTier.setTierMin(getTierFloor(tXTier.getTierMax()));
            if (save)
            {
                getTiers().put(tXTier.getTierMax(), tXTier);
                if (getTiers().containsKey(tXTier.getTierMax()))
                {
                    if (saveTier(tXTier.getTierCode(), getTiers()))
                    {
                        JOptionPane.showMessageDialog(this, "Tier saved successfully.");
                    }

                    setTierTree();
                    selectTreeNode(tierTree, tXTier);
                }

                //save here
                System.err.println("Here to save " + tXTier.getCharValue());
                System.err.println("Here to save " + tXTier.getTierCode());
                System.err.println("Here to save " + tXTier.getTierId());

                System.err.println("Here to save " + tXTier.getTierMax());
                System.err.println("Here to save " + tXTier.getTierMin());
                System.err.println("Here to save " + tXTier.getValue());
                //  getTiers().put(tXTier.getTierMax(), tXTier);
                //   setTierTree();
            }
            else
            {
                // delete tier
                deleteTier(tXTier);
                setTierTree();
                selectTreeNode(tierTree, tXTier);
            }
        }
    }//GEN-LAST:event_tierButtonActionPerformed

    private void tierCodeBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tierCodeBoxActionPerformed
    {//GEN-HEADEREND:event_tierCodeBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tierCodeBoxActionPerformed

    private void tierCodeBoxPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_tierCodeBoxPropertyChange
    {
    }

    private void tierCodeBoxItemStateChanged(java.awt.event.ItemEvent evt)
    {
        if (tierCodeBox.getSelectedIndex() != 0)
        {
            setTiers(queryParameterTier(tierCodeBox.getSelectedItem().toString().split("~")[0]));
            setTierTree();
        }
    }

    private void tierTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_tierTreeValueChanged
    {//GEN-HEADEREND:event_tierTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tierTree.getLastSelectedPathComponent();
        if (selectedNode != null)
        {
            if (selectedNode.getUserObject() instanceof AXTier)
            {
                displayTier((AXTier) selectedNode.getUserObject());
            }
            else
            {
                acceptTier();
            }
        }
    }//GEN-LAST:event_tierTreeValueChanged

    public BigDecimal getTierFloor(BigDecimal tierCeiling, HashMap<BigDecimal, AXTier> tiers)
    {
        BigDecimal floor = formatDecimal(new BigDecimal(0.01));
        for (AXTier tier : getTiers().values())
        {
            floor = (tier.getTierMax().compareTo(floor) > 0 && tier.getTierMax().compareTo(tierCeiling) < 0) ? tier.getTierMax().add(new BigDecimal(0.01)) : floor;
        }
        return formatDecimal(floor);
    }

    public BigDecimal getTierFloor(BigDecimal tierCeiling)
    {
        BigDecimal floor = formatDecimal(new BigDecimal(0.01));
        for (AXTier tier : getTiers().values())
        {
            floor = (tier.getTierMax().compareTo(floor) > 0 && tier.getTierMax().compareTo(tierCeiling) < 0) ? tier.getTierMax().add(new BigDecimal(0.01)) : floor;
        }
        return formatDecimal(floor);
    }

    private void displayTier(AXTier tier)
    {
        setAllFields(tierDisplayPanel, false);
        tierMaxField.setText(formatDecimal(tier.getTierMax()).toPlainString());
        tierValueField.setText(formatDecimal(tier.getValue()).toPlainString());
        tierMinField.setText(getTierFloor(tier.getTierMax()).toPlainString());
        tierButton.setText("Remove Tier");

    }

    private void acceptTier()
    {
        setAllFields(tierDisplayPanel, true);
        resetAllFields(tierDisplayPanel);
        tierMinField.setEditable(false);
        tierButton.setText("Save Tier");
    }

    public void showTierDialog()
    {
        tierTree.setSelectionRow(0);

        if (tierDialog == null)
        {
            tierDialog = new JDialog(MainClass.serviceUI, "Tier Settings", Dialog.ModalityType.APPLICATION_MODAL);
            tierDialog.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/logo.png")));

            tierDialog.setContentPane(this);
            tierDialog.pack();

            tierDialog.setResizable(false);
            tierDialog.setLocationRelativeTo(MainClass.serviceUI);
            tierDialog.setVisible(true);
            tierDialog.setAlwaysOnTop(true);


        }
        else
        {
            tierDialog.setVisible(true);
        }
//        SwingUtilities.invokeLater(()
//                ->
//        {
//            tierDialog = new JDialog(MainClass.serviceUI, "ATM Charges");
//            tierDialog.setContentPane(this);
//            tierDialog.pack();
//            tierDialog.setLocationRelativeTo(MainClass.serviceUI);
//            tierDialog.setVisible(true);
//            tierDialog.setAlwaysOnTop(true);
//        });
    }

    private void closeTierActionPerformed(java.awt.event.ActionEvent evt)
    {
        hideChargesDialog();
    }

    public void hideChargesDialog()
    {
//        try
//        {
//            conn.close();
//            conn = null;
//        } catch (SQLException ex)
//        {
//            conn = null;
//        }
        tierDialog.setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeTier;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JLabel jLabel13;
    private JPanel jPanel1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton tierButton;
    private JComboBox<String> tierCodeBox;
    private JPanel tierDisplayPanel;
    private JTextField tierMaxField;
    private JTextField tierMinField;
    private JTree tierTree;
    private JScrollPane tierTreeScroller;
    private JTextField tierValueField;

    // End of variables declaration//GEN-END:variables
    public void formatDecimalValue(JTextField field)
    {
        BigDecimal value = convertToType(field.getText().trim(), BigDecimal.class);
        if (!isBlank(value))
        {
            field.setText(formatDecimal(value).toPlainString());
        }
    }

    public <T> T convertToType(String variable, Class<T> clazz)
    {
        return convertToType(variable, clazz, null);
    }

    public <T> T convertToType(String variable, Class<T> clazz, T defaultValue)
    {
        try
        {
            return (T) clazz.getConstructor(String.class).newInstance(variable.trim());
        } catch (Exception ex)
        {
            return defaultValue;
        }
    }

    public BigDecimal formatDecimal(BigDecimal value)
    {
        return !isBlank(value) ? value.setScale(2, RoundingMode.HALF_UP) : value;
    }

    public String formatDecimalText(BigDecimal value)
    {
        return !isBlank(value) ? value.setScale(2, RoundingMode.HALF_UP).toPlainString() : null;
    }

    public boolean isBlank(Object object)
    {
        return object == null || "".equals(String.valueOf(object).trim()) || "null".equals(String.valueOf(object).trim()) || String.valueOf(object).trim().toLowerCase().contains("---select");
    }

    public void setAllFields(Component component, boolean enabled)
    {
        if (component instanceof JPanel)
        {
            for (Component comp : ((JPanel) component).getComponents())
            {
                setAllFields(comp, enabled);
            }
        }
        if (component instanceof JTextField)
        {
            ((JTextField) component).setEditable(enabled);
        }
        if (component instanceof JTextArea)
        {
            ((JTextArea) component).setEditable(enabled);
        }
        if (component instanceof JCheckBox)
        {
            ((JCheckBox) component).setEnabled(enabled);
        }
        if (component instanceof JComboBox)
        {
            ((JComboBox) component).setEnabled(enabled);
        }

    }

    public void resetAllFields(Component component, Component... exceptions)
    {
        List<Component> list = Arrays.asList(exceptions);
        if (!list.contains(component))
        {
            if (component instanceof JPanel)
            {
                if (((JPanel) component).getBorder() != null && ((JPanel) component).getBorder() instanceof CQBorder)
                {
                    ((JCheckBox) ((CQBorder) ((JPanel) component).getBorder()).getComponent()).setSelected(false);
                    component.repaint();
                }
                for (Component comp : ((JPanel) component).getComponents())
                {
                    resetAllFields(comp, exceptions);
                }
            }
            else if (component instanceof JScrollPane)
            {
                resetAllFields(((JScrollPane) component).getViewport().getView(), exceptions);
            }
            else if (component instanceof JTextField)
            {
                ((JTextField) component).setText("");
            }
            else if (component instanceof JTextArea)
            {
                ((JTextArea) component).setText("");
            }
            else if (component instanceof JCheckBox && component.isEnabled())
            {
                ((JCheckBox) component).setSelected(false);
            }
            else if (component instanceof JComboBox && component.isEnabled() && ((JComboBox) component).getItemCount() > 0)
            {
                ((JComboBox) component).setSelectedIndex(0);
            }

        }
    }

    public void selectTreeNode(JTree tree, Object userObject)
    {
        if (!isBlank(userObject))
        {
            DefaultMutableTreeNode currentNode = ((DefaultMutableTreeNode) tree.getModel().getRoot()).getFirstLeaf();
            while (currentNode != null)
            {
                if (Objects.equals(currentNode.getUserObject(), userObject) || Objects.equals(currentNode.getUserObject().toString().split("~")[0].toUpperCase().trim(), String.valueOf(userObject).split("~")[0].toUpperCase().trim()))
                {
                    if (!Objects.equals(currentNode.getUserObject(), getSelectedObject(tree, userObject.getClass())))
                    {
                        tree.scrollPathToVisible(new TreePath(currentNode.getPath()));
                        tree.setSelectionPath(new TreePath(currentNode.getPath()));
                        updateTreeUI(tree, false);
                    }
                    break;
                }
                DefaultMutableTreeNode nextNode = currentNode.isLeaf() ? currentNode.getNextSibling() : (DefaultMutableTreeNode) currentNode.getFirstChild();
                currentNode = nextNode == null ? ((DefaultMutableTreeNode) currentNode.getParent()).getNextSibling() : nextNode;
            }
        }
    }

    public void updateTreeUI(JTree tree, boolean resetScrollers)
    {
        EventQueue.invokeLater(()
                ->
        {
            Container container = SwingUtilities.getAncestorOfClass(JScrollPane.class, tree);
            if (container instanceof JScrollPane)
            {
                JScrollPane scroller = (JScrollPane) container;
                scroller.getHorizontalScrollBar().setValue(0);
                if (resetScrollers)
                {
                    scroller.getVerticalScrollBar().setValue(0);
                }
                scroller.setBorder(null);
            }
            tree.updateUI();
        });
    }

    public <T> T getSelectedObject(JTree tree, Class<T> clazz)
    {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        if (selectedNode != null)
        {
            if (clazz.isInstance(selectedNode.getUserObject()))
            {
                return (T) selectedNode.getUserObject();
            }
        }
        return null;
    }

    public void setTierTree()
    {
        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) tierTree.getModel().getRoot());
        rootNode.removeAllChildren();

        rootNode.add(new DefaultMutableTreeNode("Add Tier"));
        setTierFloors();

        for (AXTier tier : sortArray(getTiers().values().toArray(new AXTier[0]), true))
        {
            rootNode.add(new DefaultMutableTreeNode(tier));
        }
        setTiersPanel();
        expandAllNodes(tierTree, AXTier.class);
    }

    private void setTierFloors()
    {
        if (!isBlank(tierCodeBox.getSelectedItem().toString()))
        {
            BigDecimal floor = formatDecimal(new BigDecimal(0.01));
            for (AXTier tier : sortArray(getTiers().values().toArray(new AXTier[getTiers().size()]), true))
            {
                tier.setTierMin(floor);
                getTiers().put(tier.getTierMax(), tier);
                floor = tier.getTierMax().add(formatDecimal(new BigDecimal(0.01)));
            }
        }
    }

    public void expandAllNodes(JTree tree, Class clazz)
    {
        int selRow = 0;
        tree.updateUI();
        for (int i = 0; i < tree.getRowCount(); i++)
        {
            selRow = (selRow == 0 && clazz.isInstance(((DefaultMutableTreeNode) tree.getPathForRow(i).getLastPathComponent()).getUserObject())) ? i : selRow;
            tree.expandRow(i);
        }
        tree.setSelectionRow(selRow);
        tree.scrollPathToVisible(tree.getPathForRow(selRow));
        updateTreeUI(tree, true);
    }

    public boolean isPositiveNumber(String text)
    {
        try
        {
            return convertToType(text, Double.class) >= 0;
        } catch (Exception ex)
        {
            return false;
        }
    }

    private void setTiersPanel()
    {

        tierTree.setEnabled(true);
        for (Component c : tierDisplayPanel.getComponents())
        {
            if (!(c instanceof JLabel))
            {
                c.setEnabled(tierTree.isEnabled());
                if (c instanceof JTextField)
                {
                    ((JTextField) c).setText("");
                }
            }
        }
    }

    public <T> ArrayList<T> sortArrayList(ArrayList<T> arrayList, boolean ascending)
    {
        Collections.sort(arrayList, ascending ? ((Comparator<T>) (T o1, T o2) -> ((Comparable) o1).compareTo(o2)) : ((Comparator<T>) (T o1, T o2) -> ((Comparable) o2).compareTo(o1)));
        return arrayList;
    }

    public <T> T[] sortArray(T[] array, boolean ascending)
    {
        Arrays.sort(array, ascending ? ((Comparator<T>) (T o1, T o2) -> ((Comparable) o1).compareTo(o2)) : ((Comparator<T>) (T o1, T o2) -> ((Comparable) o2).compareTo(o1)));
        return array;
    }

    public HashMap<BigDecimal, AXTier> queryParameterTier(String code)
    {
        HashMap<BigDecimal, AXTier> paramTier = new HashMap<>();
        System.out.println("SELECT TIER_CODE,TIER_FLOOR,TIER_CEILING,TIER_VALUE FROM " + XapiCodes.xapiSchema + "..E_LOAN_TIER WHERE TIER_CODE ='" + code + "' ");

        try (Statement statement = conn.createStatement();
             ResultSet rs = statement.executeQuery("SELECT TIER_CODE,TIER_FLOOR,TIER_CEILING,TIER_VALUE FROM " + XapiCodes.xapiSchema + "..E_LOAN_TIER WHERE TIER_CODE ='" + code + "' "))
        {

            while (rs.next())
            {
                AXTier loanParameterTier = new AXTier();
                loanParameterTier.setTierMax(rs.getBigDecimal("TIER_CEILING"));
                loanParameterTier.setTierMin(rs.getBigDecimal("TIER_FLOOR"));
                loanParameterTier.setValue(rs.getBigDecimal("TIER_VALUE"));
                paramTier.put(loanParameterTier.getTierMax(), loanParameterTier);
            }
        } catch (Exception e1)
        {
            ApiLogger.getLogger().error(e1);
        }
        return paramTier;
    }

    private boolean saveTier(String parentKey, HashMap<BigDecimal, AXTier> tiers)
    {
        boolean RC = deleteWholeTier(parentKey);
        for (AXTier axTier : tiers.values())
        {
            System.out.println("insert into " + XapiCodes.xapiSchema + "..E_LOAN_TIER(TIER_CODE,TIER_FLOOR,TIER_CEILING,TIER_VALUE)" +
                    "VALUES('" + axTier.getTierCode() + "'," + axTier.getTierMin() + "," + axTier.getTierMax() + "," + axTier.getValue() + ")");

            try (Statement statement = conn.createStatement())
            {
                statement.executeUpdate("insert into " + XapiCodes.xapiSchema + "..E_LOAN_TIER(TIER_CODE,TIER_FLOOR,TIER_CEILING,TIER_VALUE)" +
                        "VALUES('" + axTier.getTierCode() + "'," + axTier.getTierMin() + "," + axTier.getTierMax() + "," + axTier.getValue() + ")");
                RC = true;
            } catch (Exception ex)
            {
                ex.printStackTrace();
                RC = false;
            }
        }
        return RC;
    }

    private boolean deleteTier(AXTier axTier)
    {
        System.out.println("delete from " + XapiCodes.xapiSchema + "..E_LOAN_TIER where TIER_CODE ='" + axTier.getTierCode() + "' and tier_ceiling = " + axTier.getTierMax() + "");
        try (Statement statement = conn.createStatement())
        {
            statement.executeUpdate("delete from " + XapiCodes.xapiSchema + "..E_LOAN_TIER where TIER_CODE ='" + axTier.getTierCode() + "' and tier_ceiling = " + axTier.getTierMax() + "");
            return true;
        } catch (Exception ex)
        {
            ex.printStackTrace();
            return false;
        }
    }

    private boolean deleteWholeTier(String parentKey)
    {
        System.out.println("delete from " + XapiCodes.xapiSchema + "..E_LOAN_TIER where TIER_CODE ='" + parentKey + "'");
        try (Statement statement = conn.createStatement())
        {
            statement.executeUpdate("delete from " + XapiCodes.xapiSchema + "..E_LOAN_TIER where TIER_CODE ='" + parentKey + "'");
            return true;
        } catch (Exception ex)
        {
            ex.printStackTrace();
            return false;
        }
    }

    /**
     * @return the tiers
     */
    public HashMap<BigDecimal, AXTier> getTiers()
    {
        return tiers;
    }

    /**
     * @param tiers the tiers to set
     */
    public void setTiers(HashMap<BigDecimal, AXTier> tiers)
    {
        this.tiers = tiers;
    }
}
