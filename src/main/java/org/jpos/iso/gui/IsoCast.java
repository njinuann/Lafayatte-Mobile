/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jpos.iso.gui;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import org.jpos.iso.ISOUtil;
import org.redlamp.util.BSPanel;
import org.redlamp.util.XapiPool;
import org.redlamp.util.XapiUtils;

/**
 * @author okiad
 */
@SuppressWarnings("serial")
public class IsoCast extends javax.swing.JFrame
{

    /**
     * Creates new form IsoCast
     */
    public IsoCast()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents()
    {

        isoMeterPanel = new javax.swing.JPanel();
        isometerToolBarS = new javax.swing.JToolBar();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        enable_offline = new javax.swing.JButton();
        shutdown = new javax.swing.JButton();
        view_logs = new javax.swing.JButton();
        settings = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        shutdownMenu = new javax.swing.JMenuItem();
        viewLogs = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        alwaysOntop = new javax.swing.JCheckBoxMenuItem();
        enableOfflineMenu = new javax.swing.JCheckBoxMenuItem();
        mobileCharges = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        aboutMenu = new javax.swing.JMenuItem();
        licenseMenu = new javax.swing.JMenuItem();
//        settingMenu = new javax.swing.JMenu();
//        settingMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Catalinah Advans Mobility Interface");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/logo.png")));
        setResizable(false);

        isoMeterPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        isoMeterPanel.setLayout(new java.awt.BorderLayout());

        isometerToolBarS.setBorder(null);
        isometerToolBarS.setFloatable(false);
        isometerToolBarS.setRollover(true);
        isometerToolBarS.setToolTipText("");
        isometerToolBarS.setOpaque(false);
        setIsoMeters();
        isoMeterPanel.add(isometerToolBarS, java.awt.BorderLayout.LINE_END);

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 2, 13)); // NOI18N
        jLabel3.setText("Powered By Neptune Software Plc");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N

        enable_offline.setText("Charge setup");
        enable_offline.setEnabled(false);

        shutdown.setText("Shutdown");
        shutdown.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                shutdownActionPerformed(evt);
            }
        });

        view_logs.setText("View Logs");
        view_logs.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                view_logsActionPerformed(evt);
            }
        });

        settings.setText("settings");
        settings.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                settingsActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        shutdownMenu.setText("Shutdown");
        shutdownMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                shutdownMenuActionPerformed(evt);
            }
        });
        jMenu1.add(shutdownMenu);

        viewLogs.setText("View System Logs");
        viewLogs.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                viewLogsActionPerformed(evt);
            }
        });
        jMenu1.add(viewLogs);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        alwaysOntop.setText("Always ontop");
        alwaysOntop.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                alwaysOntopActionPerformed(evt);
            }
        });
        jMenu2.add(alwaysOntop);

        enableOfflineMenu.setText("Enable Offline");
        enableOfflineMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                enableOfflineMenuActionPerformed(evt);
            }
        });
//		jMenu2.add(enableOfflineMenu);
        mobileCharges.setText("Refresh Charges");
        mobileCharges.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                mobileChargesMenuActionPerformed(evt);
            }
        });
//		jMenu2.add(mobileCharges);
        jMenuBar1.add(jMenu2);
        jMenu3.setText("About");

        aboutMenu.setText("About Mobility");
        aboutMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                aboutMenuActionPerformed(evt);
            }
        });
//		jMenu3.add(aboutMenu);

        licenseMenu.setText("App Version");
        licenseMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                licenseMenuActionPerformed(evt);
            }
        });
        jMenu3.add(licenseMenu);

        jMenuBar1.add(jMenu3);
//
//        settingMenu.setText("settings");
//
//        settingMenu.setText("Setting");
//
//        settingMenuItem.setText("settings");
//        settingMenuItem.addActionListener(new java.awt.event.ActionListener()
//        {
//            public void actionPerformed(java.awt.event.ActionEvent evt)
//            {
//                settingMenuItemActionPerformed(evt);
//            }
//        });
//        settingMenu.add(settingMenuItem);
//
//        jMenuBar1.add(settingMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                javax.swing.GroupLayout.Alignment.TRAILING,
                layout.createSequentialGroup().addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 208,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(isoMeterPanel, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 222,
                                                Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(view_logs)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(settings)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(shutdown)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(enable_offline)))

                        .addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(isoMeterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 71,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(enable_offline).addComponent(shutdown).addComponent(settings)
                                                .addComponent(view_logs).addComponent(jLabel3))))
                        .addContainerGap()));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>

    protected void mobileChargesMenuActionPerformed(ActionEvent evt)
    {
        if (XapiPool.isInOfflineMode()) {
            JOptionPane.showMessageDialog(this,
                    "The system is currently in offline mode.\n[This action cannot be performed]", "Offline Activated",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void shutdownActionPerformed(ActionEvent evt)
    {
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to proceed to shutdown this service?",
                "Confirm Action", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            dispose();
            Runtime.getRuntime().exit(0);
        }
    }

    private void view_logsActionPerformed(ActionEvent evt)
    {
        if (JOptionPane.showConfirmDialog(this, "This action will only open the current log. Do you want to continue?",
                "Confirm Action", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            XapiUtils.open(XapiUtils.LOGS_DIR);
        }
    }

private void settingsActionPerformed(ActionEvent evt)
{
    if (JOptionPane.showConfirmDialog(this, "This action will only open the Settins. Do you want to continue?",
            "Confirm Action", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        BSPanel bsPanel = new BSPanel("USSD");
        bsPanel.showSettingsDialog();
    }
}
    private void alwaysOntopActionPerformed(ActionEvent evt)
    {
        if (!isAlwaysOnTopSupported()) {
            JOptionPane.showMessageDialog(this, "Always ontop isn't supported by this operating system", "Alert Option",
                    JOptionPane.PLAIN_MESSAGE);
            return;
        }
        if (isAlwaysOnTop()) {
            setAlwaysOnTop(false);
        }
        else
            setAlwaysOnTop(true);
    }

    private void licenseMenuActionPerformed(ActionEvent evt)
    {
        JOptionPane.showMessageDialog(this, "Build Version:  f9949f6");
    }

//    private void settingMenuItemActionPerformed(ActionEvent evt){
//
//        bsPanel.showSettingsDialog();
//}
    private void aboutMenuActionPerformed(ActionEvent evt)
    {

        JOptionPane.showMessageDialog(this, "Catalinah Mobile Banking Host Bridge is licensed to Lafayette");

    }

    private void enableOfflineMenuActionPerformed(ActionEvent evt)
    {
        serviceOffline();
    }

    private void shutdownMenuActionPerformed(ActionEvent evt)
    {
        // TODO add your handling code here:
    }

    private void viewLogsActionPerformed(ActionEvent evt)
    {
        // TODO add your handling code here:

    }

    // Variables declaration - do not modify
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JCheckBoxMenuItem alwaysOntop;
    private javax.swing.JCheckBoxMenuItem enableOfflineMenu;
    private javax.swing.JMenuItem mobileCharges;
    private javax.swing.JButton enable_offline;
    private javax.swing.JPanel isoMeterPanel;
    private javax.swing.JToolBar isometerToolBarS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem licenseMenu;
    private javax.swing.JButton shutdown;
    private javax.swing.JMenuItem shutdownMenu;
    private javax.swing.JMenuItem viewLogs;
    private javax.swing.JButton view_logs;
    private javax.swing.JButton settings;
    private javax.swing.JMenu settingMenu;
    private javax.swing.JMenuItem settingMenuItem;
    // End of variables declaration

    private ISOMeter ussd = new ISOMeter(null, "USSD", "OPEN");
    public NetworkIsoMeter restful = new NetworkIsoMeter("REST");
//    private final BSPanel bsPanel = new BSPanel("USSD");

    public void setRestFulMeter(NetworkIsoMeter restful)
    {
        int i = isometerToolBarS.getComponentIndex(getRestFulMeter());
        isometerToolBarS.remove(getRestFulMeter());
        isometerToolBarS.add(restful, i);
        isometerToolBarS.validate();
        this.restful = restful;
    }

    public void setUssdIsoMeter(ISOMeter mobility)
    {
        int i = isometerToolBarS.getComponentIndex(getUssdIsoMeter());
        isometerToolBarS.remove(getUssdIsoMeter());
        isometerToolBarS.add(mobility, i);
        isometerToolBarS.validate();
        this.ussd = mobility;
    }

    public ISOMeter getUssdIsoMeter()
    {
        return ussd;
    }

    public NetworkIsoMeter getRestFulMeter()
    {
        return restful;
    }

    private void setIsoMeters()
    {
        isometerToolBarS.removeAll();
        isometerToolBarS.add(getUssdIsoMeter());
        isometerToolBarS.addSeparator();
        isometerToolBarS.add(getRestFulMeter());
        SwingUtilities.invokeLater(new Runnable()
        {

            @Override
            public void run()
            {
                ISOUtil.sleep(50);
                isometerToolBarS.updateUI();
            }
        });
    }

    private void serviceOffline()
    {
        String actionText = enable_offline.getText();
        if ("Enable Offline".equals(actionText)) {
            if (JOptionPane.showConfirmDialog(this,
                    "This action will attempt to activate offline services. Do you want to continue?", "Confirm Action",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                enable_offline.setText("Please Wait");
                enableOfflineMenu.setText("Please Wait");
            }
        }
        else {
            if (JOptionPane.showConfirmDialog(this,
                    "This action will attempt to deactivate offline services. Do you want to continue?",
                    "Confirm Action", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                enable_offline.setText("Please Wait");
                enableOfflineMenu.setText("Please Wait");
            }
        }
    }

    public synchronized void updateMobileUI(boolean outwards, String txn)
    {
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                restful.setValue(outwards ? 400 : -400, txn);
            }
        });
    }

    public synchronized void setStatus(boolean connected)
    {
        restful.setUssdConnected(connected);
    }
}
